set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
View(x)
plot(x)
km.out=kmeans(x,2,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out=kmeans(x,3,nstart=20)
plot(x)
#clean variables
rm(list=ls(all=TRUE))
set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
View(x)
plot(x)
km.out=kmeans(x,2,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out=kmeans(x,3,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
#clean variables
rm(list=ls(all=TRUE))
set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
View(x)
plot(x)
km.out=kmeans(x,2,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out=kmeans(x,3,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out$tot.withinss
#clean variables
rm(list=ls(all=TRUE))
set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
View(x)
plot(x)
km.out=kmeans(x,2,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out=kmeans(x,3,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out$tot.withinss
#clean variables
rm(list=ls(all=TRUE))
set.seed(2)
hc.complete = hclust(dist(x), method="complete")
hc.average = hclust(dist(x), method="average")
hc.single = hclust(dist(x), method="single")
#clean variables
rm(list=ls(all=TRUE))
set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
View(x)
plot(x)
km.out=kmeans(x,2,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out=kmeans(x,3,nstart=20)
km.out$cluster
[1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
plot(x, col=(km.out$cluster+1), main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out$tot.withinss
#clean variables
rm(list=ls(all=TRUE))
set.seed(2)
hc.complete = hclust(dist(x), method="complete")
hc.average = hclust(dist(x), method="average")
hc.single = hclust(dist(x), method="single")
# multiple plots for comparison
par(mfrow=c(1,3))
plot(hc.complete, main="Complete Linkage", xlab="", sub="", cex=0.9)
plot(hc.average, main="Average Linkage", xlab="", sub="", cex=0.9)
plot(hc.single, main="Single Linkage", xlab="", sub="", cex=0.9)
cutree(hc.complete,2)
cutree(hc.average,2)
cutree(hc.single,2)
[1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[34] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
1 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
cutree(hc.single,4)
xsc = scale(x)
#clean variables
rm(list=ls(all=TRUE))
set.seed(2)
hc.complete = hclust(dist(x), method="complete")
hc.average = hclust(dist(x), method="average")
hc.single = hclust(dist(x), method="single")
# multiple plots for comparison
par(mfrow=c(1,3))
plot(hc.complete, main="Complete Linkage", xlab="", sub="", cex=0.9)
plot(hc.average, main="Average Linkage", xlab="", sub="", cex=0.9)
plot(hc.single, main="Single Linkage", xlab="", sub="", cex=0.9)
cutree(hc.complete,2)
cutree(hc.average,2)
cutree(hc.single,2)
[1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[34] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
1 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
cutree(hc.single,4)
xsc = scale(x)
hc.complete = hclust(dist(x), method="complete")
hc.average = hclust(dist(x), method="average")
hc.single = hclust(dist(x), method="single")
# multiple plots for comparison
par(mfrow=c(1,3))
plot(hc.complete, main="Complete Linkage", xlab="", sub="", cex=0.9)
plot(hc.average, main="Average Linkage", xlab="", sub="", cex=0.9)
plot(hc.single, main="Single Linkage", xlab="", sub="", cex=0.9)
cutree(hc.complete,2)
cutree(hc.average,2)
cutree(hc.single,2)
[1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[34] 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
1 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2
[34] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
cutree(hc.single,4)
xsc = scale(x)
yelp_dataset <- read.csv("C:/Users/Adam Nicewarner/Downloads/yelp_dataset/yelp_dataset", sep="")
View(yelp_dataset)
shiny::runApp('School/Info 478/INFO478_Final_7/final')
tester <- unique(test$variant)
kk
test <- read.csv("data/europedata.csv")
ls
setwd("~/School/Info 478/INFO478_Final_7")
test <- read.csv("data/europedata.csv")
runApp('final')
library(tidyverse)
runApp('final')
coviddata <- read.csv("data/europedata.csv")
countries <- read.csv("data/countries.csv")
# countries with coordinates
test <- left_join(coviddata, countries, by='country_code')
test <- read.csv("data/europedata.csv")
coviddata <- read.csv("data/europedata.csv")
countries <- read.csv("data/countries.csv")
setwd("~/School/Info 478/INFO478_Final_7")
countries <- read.csv("data/countries.csv")
setwd("~/School/Info 478/INFO478_Final_7/final")
countries <- read.csv("data/countries.csv")
coviddata <- read.csv("data/europedata.csv")
countries <- read.csv("data/countries.csv")
# countries with coordinates
test <- left_join(coviddata, countries, by='country_code')
tester <- unique(test$variant)
tester
shiny::runApp()
library(tidyverse)
runApp()
View(test)
library(rgeos)
library(rworldmap)
# get world map
wmap <- getMap(resolution="high")
# get centroids
centroids <- gCentroid(wmap, byid=TRUE)
# get a data.frame with centroids
df <- as.data.frame(centroids)
head(df)
#>                     x         y
#> Aruba       -69.97345  12.51678
#> Afghanistan  66.00845  33.83627
#> Angola       17.53646 -12.29118
#> Anguilla    -63.06082  18.22560
#> Albania      20.05399  41.14258
#> Aland        20.03715  60.20733
# plot
plot(centroids)
library(rgeos)
library(rworldmap)
# get world map
wmap <- getMap(resolution="high")
# get centroids
centroids <- gCentroid(wmap, byid=TRUE)
# get a data.frame with centroids
df <- as.data.frame(centroids)
head(df)
install.packages(rgeos)
install.packages('rgeos')
install.packages('rworldmap')
library(rgeos)
library(rworldmap)
# get world map
wmap <- getMap(resolution="high")
# get centroids
centroids <- gCentroid(wmap, byid=TRUE)
# get a data.frame with centroids
df <- as.data.frame(centroids)
head(df)
runApp()
# summarize by new cases #omicron
testmap <- test %>%
filter(variant == "B.1.1.529", source == "GISAID") %>%
group_by(country_code) %>%
select(country_code, longitude, latitude, new_cases) %>%
summarize(totalcases = sum(new_cases))
# table with country code, coordinates and total cases
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(country_code, longitude, latitude, totalcases) %>%
drop_na(longitude)
library(tidyverse)
library(leaflet)
coviddata <- read.csv("data/europedata.csv")
countries <- read.csv("data/countries.csv")
# countries with coordinates
test <- left_join(coviddata, countries, by='country_code')
# summarize by new cases #omicron
testmap <- test %>%
filter(variant == "B.1.1.529", source == "GISAID") %>%
group_by(country_code) %>%
select(country_code, longitude, latitude, new_cases) %>%
summarize(totalcases = sum(new_cases))
# table with country code, coordinates and total cases
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(country_code, longitude, latitude, totalcases) %>%
drop_na(longitude)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ sqrt(totalcases * .00015),
stroke = FALSE, fillOpacity = .5
)
View(testmap)
View(m)
m
runApp()
runApp()
View(test)
population <- read.csv("data/population.csv")
View(population)
population <- read.csv("data/population.csv")
View(population)
population <- read.csv("data/population.csv")
View(population)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ sqrt(2 * totalcases /X2020),
stroke = FALSE, fillOpacity = .5
)
View(test)
library(tidyverse)
library(leaflet)
coviddata <- read.csv("data/europedata.csv")
countries <- read.csv("data/countries.csv")
population <- read.csv("data/population.csv")
# countries with coordinates
test <- left_join(coviddata, countries, by='country_code')
test <- left_join(test, countries, by='country_code')
# summarize by new cases #omicron
testmap <- test %>%
filter(variant == "B.1.1.529", source == "GISAID") %>%
group_by(country_code) %>%
select(country_code, longitude, latitude, new_cases) %>%
summarize(totalcases = sum(new_cases))
# table with country code, coordinates and total cases
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(country_code, longitude, latitude, totalcases) %>%
drop_na(longitude)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ sqrt(2 * totalcases /X2020),
stroke = FALSE, fillOpacity = .5
)
library(tidyverse)
library(leaflet)
coviddata <- read.csv("data/europedata.csv")
countries <- read.csv("data/countries.csv")
population <- read.csv("data/population.csv")
# countries with coordinates
test <- left_join(coviddata, countries, by='country_code')
test <- left_join(test, countries, by='country_code')
# summarize by new cases #omicron
testmap <- test %>%
filter(variant == "B.1.1.529", source == "GISAID") %>%
group_by(country_code) %>%
select(country_code, longitude, latitude, new_cases) %>%
summarize(totalcases = sum(new_cases))
# table with country code, coordinates and total cases
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(country_code, longitude, latitude, totalcases) %>%
drop_na(longitude)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ sqrt(2 * totalcases /X2020),
stroke = FALSE, fillOpacity = .5
)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ sqrt(2 * totalcases /population),
stroke = FALSE, fillOpacity = .5
)
View(test)
test <- left_join(test, countries, by='Alpha.3.code.y')
test <- left_join(test, countries, by='Alpha.3.code.y')
coviddata <- read.csv("data/europedata.csv")
countries <- read.csv("data/countries.csv")
population <- read.csv("data/population.csv")
# countries with coordinates
test <- left_join(coviddata, countries, by='country_code')
test <- left_join(test, countries, by='code2')
View(test)
View(testmap)
View(mapInfo)
countries <- left_join(test, countries, by='code2')
View(countries)
countries <- read.csv("data/countries.csv")
countries <- left_join(test, countries, by='code2')
countries <- read.csv("data/countries.csv")
countries = merge(x=test,y=countries,by="code2",all.x=TRUE)
countries <- read.csv("data/countries.csv")
countries = merge(x=countries,y=test,by="code2",all.x=TRUE)
countries <- read.csv("data/countries.csv")
countries = merge(x=countries,y=test,by="code2",all.x=TRUE)
countries <- read.csv("data/countries.csv")
countries = merge(x=countries,y=population,by="code2",all.x=TRUE)
countries <- read.csv("data/countries.csv")
countries <- left_join(countries, population, by='code2')
# table with country code, coordinates and total cases
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(country_code, longitude, latitude, totalcases, population) %>%
drop_na(longitude)
View(mapInfo)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ sqrt(2 * totalcases / population),
stroke = FALSE, fillOpacity = .5
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ sqrt(100 * totalcases / population),
stroke = FALSE, fillOpacity = .5
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (100 * totalcases / population),
stroke = FALSE, fillOpacity = .5
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (10 * totalcases / population),
stroke = FALSE, fillOpacity = .5
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5
)
m
m <- addTiles(m) %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
# table with country code, coordinates and total cases
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(Country, country_code, longitude, latitude, totalcases, population) %>%
drop_na(longitude)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = Country
)
mapInfo <- left_join(testmap, countries, by='country_code')
View(mapInfo)
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(country, country_code, longitude, latitude, totalcases, population) %>%
drop_na(longitude)
mapInfo <- left_join(testmap, countries, by='country_code') %>%
select(Country, country_code, longitude, latitude, totalcases, population) %>%
drop_na(longitude)
View(mapInfo)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = Country
)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = mapInfo$Country
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = mapInfo$Country + "total cases: " + totalcases
)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = paste(mapInfo$Country, "total cases: ", totalcases)
)
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = paste(mapInfo$Country, "total cases: ", mapInfo$totalcases)
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = paste(mapInfo$Country, "<br>","total cases: ", mapInfo$totalcases)
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = paste(mapInfo$Country, "\n","total cases: ", mapInfo$totalcases)
)
m
m <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = paste(mapInfo$Country, "total cases: ", formatC(mapInfo$totalcases, format="d", big.mark=","))
)
m
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
leafmap <-leaflet(mapInfo) %>%
addTiles() %>%
addCircleMarkers(
radius = ~ (50 * totalcases / population),
stroke = FALSE, fillOpacity = .5,
label = paste(mapInfo$Country, "total cases: ", formatC(mapInfo$totalcases, format="d", big.mark=","))
)
leafmap
runApp()
output$leafmap <- leafmap
output$leafmap <- leafmap
runApp()
runApp()
runApp()
runApp()
output$outleafmap <- renderLeaflet({leafmap
dd
e
})
runApp()
runApp()
